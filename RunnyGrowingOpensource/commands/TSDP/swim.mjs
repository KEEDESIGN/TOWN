import {
  SlashCommandBuilder,
  Client,
  GatewayIntentBits,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  AttachmentBuilder,
} from "discord.js";

// „ÇØ„É©„Çπ„É¨„Éô„É´„ÅßÂèÇÂä†Âá¶ÁêÜ‰∏≠„ÅÆ„É¶„Éº„Ç∂„Éº„ÇíËøΩË∑°
const processingUsers = new Set();

class SwimGame {
  constructor() {
    this.games = new Map();
    this.swimStyles = ["Âπ≥Ê≥≥", "„ÇØ„É≠„Éº„É´", "ËÉåÊ≥≥", "„Éê„Çø„Éï„É©„Ç§"];
    this.fastMessages = [
      "üèä‚Äç‚ôÇÔ∏èÂÆåÁíß„Å™„Çø„Éº„É≥„ÅßÂä†ÈÄüÔºÅ",
      "üåäÊ≥¢„Å´‰πó„ÇãÔºÅ",
      "üê¨„Ç§„É´„Ç´„Å´‰πó„ÇãÔºÅ",
      "üí™„Éù„Çª„Ç§„Éâ„É≥„ÅÆÂäõË¶öÈÜíÔºÅ",
      "üèÑ‚Äç‚ôÇÔ∏è„Çµ„Éº„Éï„Ç£„É≥„Å´„ÅÆ„ÇãÔºÅ",
      "üßú‚Äç‚ôÄÔ∏è‰∫∫È≠ö„Å´ÂøúÊè¥„Åó„Å¶„ÇÇ„Çâ„Å£„ÅüÔºÅ",
      "üåüÊÅØÁ∂ô„Åé„Åó„Å™„Åã„Å£„ÅüÔºÅ",
      "üö§Ëàπ„Å´„ÅÆ„Å£„ÅüÔºÅ",
      "üêã„É™„Éê„Ç§„Ç¢„Çµ„É≥„ÅÆÂäõ„ÇíÂÄü„Çä„ÇãÔºÅ",
      "üèÑ‚Äç‚ôÄÔ∏èÊ∞¥„Å®„Å™„Çä„Åç„Çã",
    ];
    this.slowMessages = [
      "üí¶Ê∞¥„ÇíÈ£≤„Çì„Åß„Åó„Åæ„Å£„ÅüÔºÅ",
      "ü¶Ä„Ç´„Éã„Å®„Ç®„Éì„Å´‰∏°Ë∂≥„Çí„ÅØ„Åï„Åæ„Çå„Çã",
      "üåøÊµ∑Ëóª„Å´Ë∂≥„Çí„Å®„Çâ„Çå„ÇãÔºÅ",
      "üëì„Ç¥„Éº„Ç∞„É´„Å´„Å≤„Å≥„Åå„ÅØ„ÅÑ„ÇãÔºÅ",
      "üêô„Éù„Çª„Ç§„Éâ„É≥„ÅÆÊÄí„Çä„ÇíË≤∑„ÅÜÔºÅ",
      "üê°„Ç¶„Éã„ÅåÂà∫„Åï„Å£„ÅüÔºÅ„ÅÑ„Åü„ÅÑÔºÅ",
      "üêö„Åç„Çå„ÅÑ„Å™Ë≤ùÊÆª„Å´Ë¶ã„Å®„Çå„Çã",
      "üåä„É™„Éê„Ç§„Ç¢„Çµ„É≥„ÅÆÂè¨Âñö„Å´Â§±ÊïóÔºÅ",
      "üßú‚Äç‚ôÇÔ∏è‰∫∫È≠ö„ÅÆÊ≠å„ÅßÁú†„ÇãÔºÅ",
      "üê†„É¨„Éº„É≥„ÇíÈñìÈÅï„Åà„ÅüÔºÅ",
    ];
    this.boostMessages = [
      "**üåüBOOST!**üöÄ„Ç¢„ÇØ„Ç¢„Éû„É≥Ë¶öÈÜíÔºÅ",
      "**üåüBOOST!**üåà„Éã„É¢„Å®„Éù„Éã„Éß„ÅåÊîØÊè¥ÔºÅ",
      "**üåüBOOST!**ü¶àJAWS„Åã„ÇâÈÄÉ„Åí„Çã„ÅÆ„Å´ÂøÖÊ≠ªÔºÅ",
      "**üåüBOOST!**üåäÈÄü„ÅèÊ≥≥„Åí„ÇãÈ≠îÊ≥ï„Åå„Åã„Åã„ÇãÔºÅ",
      "**üåüBOOST!**üßú‚Äç‚ôÄÔ∏è‰∫∫È≠ö„Å´„Å™„Çä„Åç„Å£„ÅüÔºÅ",
    ];
    this.userImages = new Map([
      [
        "panda_fuku23",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E3%81%B5%E3%81%8F%E3%81%B1%E3%82%93%20(2).jpg?v=1720504168004",
      ],
      [
        "papa1975",
        "hhttps://cdn.glitch.global/3ee2c63f-7c9b-4447-bb4d-d89b1a094c27/%E7%84%A1%E9%A1%8C699_20240729140343.jpg?v=1722303892455",
      ],
      [
        "katsuo6866",
        "https://cdn.glitch.global/3ee2c63f-7c9b-4447-bb4d-d89b1a094c27/%E7%84%A1%E9%A1%8C685_20240720233321.jpg?v=1722303908160",
      ],
      [
        "rinehihei",
        "https://cdn.glitch.global/3ee2c63f-7c9b-4447-bb4d-d89b1a094c27/%E7%84%A1%E9%A1%8C684_20240720164219.jpg?v=1722303910739",
      ],
      [
        "eureka com",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C500_20240525081809.jpg?v=1720504168750",
      ],
      [
        "papicoyoshida",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C500_20240525125907.jpg?v=1720504169582",
      ],
      [
        "yasuoo0",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C501_20240525081726.jpg?v=1720504170316",
      ],
      [
        "m.arukome",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C502_20240525081547.jpg?v=1720504171127",
      ],
      [
        "mao.bkk",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C508_20240526160434.jpg?v=1720504171914",
      ],
      [
        "Michael_neurolauncher",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C510_20240526122404.jpg?v=1720504172671",
      ],
      [
        "itarou1908",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C511_20240526130900.jpg?v=1720504173386",
      ],
      [
        "kuramasa_jp",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C513_20240526155308.jpg?v=1720504174554",
      ],
      [
        "ta mu ta mu",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C519_20240527204836.jpg?v=1720504175286",
      ],
      [
        "inasan2400",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C520_20240527201544.jpg?v=1720504176043",
      ],
      [
        "keenft",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C522_20240528135229.jpg?v=1720504176750",
      ],
      [
        "hiro3734649",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C523_20240528184333.jpg?v=1720504177438",
      ],
      [
        "nawo148",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C527_20240529213945.jpg?v=1720504178169",
      ],
      [
        ".lol88",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/LOL.jpg?v=1720781353088",
      ],
       [
        "kitoshi4687",
        "https://cdn.glitch.global/3ee2c63f-7c9b-4447-bb4d-d89b1a094c27/%E7%84%A1%E9%A1%8C711_20240804084443.jpg?v=1722754072984",
      ],
      [
        "itsukingu1676",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C671_20240712142452.jpg?v=1720781354245",
      ],
      [
        "wat0312",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C668_20240712145819.jpg?v=1720781355017",
      ],
      [
        "becky.jp",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C537_20240531181830.jpg?v=1720504178932",
      ],
      [
        "mayu3.",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C584_20240608145558.jpg?v=1720504179726",
      ],
      [
        "waatee.lingo",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C645.jpg?v=1720504180489",
      ],
      [
        "ponko0320",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C653_20240708113915.jpg?v=1720504181223",
      ],
      [
        "yoki hito",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/629_20240630081407.jpg?v=1720504182012",
      ],
      [
        "apo_0204",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/APO.jpg?v=1720504182859",
      ],
      [
        "tyozetumeron",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/chozetu.jpg?v=1720504183550",
      ],
      [
        "taka0157",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C659_20240710211915.jpg?v=1720672405685",
      ],
      [
        "suisei_rx7",
        "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E3%81%99%E3%81%84%E3%81%9B%E3%81%84.jpg?v=1720504184340",
      ],
    ]);
  }

  createGame(guildId) {
    if (!this.games.has(guildId)) {
      this.games.set(guildId, {
        participants: new Map(),
        raceStarted: false,
        raceInterval: null,
        raceCount: 0,
        swimStyleChoices: new Map(),
      });
    }
    return this.games.get(guildId);
  }

  getGame(guildId) {
    return this.games.get(guildId);
  }

  addParticipant(guildId, userId) {
    const game = this.getGame(guildId);
    if (game && !game.raceStarted) {
      game.participants.set(userId, 0);
    }
  }

  removeParticipant(guildId, userId) {
    const game = this.getGame(guildId);
    if (game && !game.raceStarted) {
      game.participants.delete(userId);
    }
  }

  async startRace(guildId, channel) {
    const game = this.getGame(guildId);
    if (!game || game.participants.size === 0) {
      await channel.send("ÂèÇÂä†ËÄÖ„Åå„ÅÑ„Å™„ÅÑ„Åü„ÇÅÂ§ß‰ºö‰∏≠Ê≠¢ÔºÅ").catch(console.error);
      this.games.delete(guildId);
      return;
    }

    game.raceStarted = true;
    game.raceCount = 0;

    const imageUrls = [
      "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C654_20240708191355.jpg?v=1720502590641",
      "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C654_20240708191244.jpg?v=1720502592908",
      "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C654_20240708191314.jpg?v=1720502592047",
    ];

    game.raceInterval = setInterval(async () => {
      game.raceCount++;
      const advantageStyle =
        this.swimStyles[Math.floor(Math.random() * this.swimStyles.length)];
      let raceStatus = `\n **===üé§ÂÆüÊ≥Å${game.raceCount}üé§===**\n`;
      raceStatus += `BOOSTÊ≥≥Ê≥ï: **${advantageStyle}**\n\n`;
      let winner = null;

      for (const [userId, distance] of game.participants) {
        const prevDistance = distance;
        let newDistance = distance;
        let message = "";

        const userStyle =
          game.swimStyleChoices.get(userId) ||
          this.swimStyles[Math.floor(Math.random() * this.swimStyles.length)];
        const progress = Math.floor(Math.random() * 16) + 10;

        if (userStyle === advantageStyle) {
          newDistance += Math.floor(progress * 1.3);
        } else {
          newDistance += progress;
        }

        if (Math.random() < 0.04) {
          newDistance += 30;
          message =
            this.boostMessages[
              Math.floor(Math.random() * this.boostMessages.length)
            ];
        } else {
          message =
            progress >= 20
              ? this.fastMessages[
                  Math.floor(Math.random() * this.fastMessages.length)
                ]
              : this.slowMessages[
                  Math.floor(Math.random() * this.slowMessages.length)
                ];
        }

        game.participants.set(userId, newDistance);

        if (newDistance >= 200) {
          winner = userId;
        }

        const totalProgress = newDistance - prevDistance;
        const user = await channel.guild.members
          .fetch(userId)
          .catch(() => null);
        const displayName = user ? user.displayName : "Unknown";
        raceStatus += `**${displayName}** (${userStyle})„ÅØ\n${message}\nüèä‚Äç‚ôÇÔ∏è**${totalProgress}m**ÈÄ≤„Çì„Å†**üëâÁèæÂú®${newDistance}m**\n`;
      }

      const sortedParticipants = Array.from(game.participants.entries()).sort(
        (a, b) => b[1] - a[1]
      );

      raceStatus += "\nüèä‚Äç‚ôÇÔ∏èÁèæÂú®„ÅÆÈ†Ü‰Ωç\n";
      for (let i = 0; i < sortedParticipants.length; i++) {
        const [userId, distance] = sortedParticipants[i];
        const user = await channel.guild.members
          .fetch(userId)
          .catch(() => null);
        const displayName = user ? user.displayName : "Unknown";
        raceStatus += `${i + 1}‰Ωç:**${displayName}**\n`;
      }

      const swimStyleButtons = new ActionRowBuilder().addComponents(
        ...this.swimStyles.map((style) =>
          new ButtonBuilder()
            .setCustomId(`swimStyle_${style}`)
            .setLabel(style)
            .setStyle(ButtonStyle.Primary)
        )
      );

      // „É©„É≥„ÉÄ„É†„Å´ÁîªÂÉè„ÇíÈÅ∏Êäû
      const randomImageUrl =
        imageUrls[Math.floor(Math.random() * imageUrls.length)];
      const attachment = new AttachmentBuilder(randomImageUrl, {
        name: "race_image.jpg",
      });

      await channel
        .send({
          content: raceStatus,
          components: [swimStyleButtons],
          files: [attachment], // „É©„É≥„ÉÄ„É†„Å´ÈÅ∏Êäû„Åï„Çå„ÅüÁîªÂÉè„ÇíÊ∑ª‰ªò
        })
        .catch(console.error);

      if (winner) {
        clearInterval(game.raceInterval);
        const winnerUser = await channel.guild.members
          .fetch(winner)
          .catch(() => null);
        const winnerDisplayName = winnerUser
          ? winnerUser.displayName
          : "Unknown";
        const winnerUsername = winnerUser
          ? winnerUser.user.username
          : "Unknown";

        // „É¶„Éº„Ç∂„ÉºÂêç„Å´Âü∫„Å•„ÅÑ„Å¶ÁîªÂÉèURL„ÇíÂèñÂæó
        const winnerImageUrl = this.userImages.get(winnerUsername);

        // Ë°®Á§∫„Åô„ÇãÁîªÂÉè„ÅÆ„É™„Çπ„Éà„Çí‰ΩúÊàê
        const imagesToDisplay = [
          "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C650_20240708011439.jpg?v=1720392300820",
        ];

        // ÂÑ™ÂãùËÄÖ„ÅÆÂõ∫Êúâ„ÅÆÁîªÂÉè„Åå„ÅÇ„ÇãÂ†¥Âêà„ÄÅ„Åù„Çå„ÇÇËøΩÂä†
        if (winnerImageUrl) {
          imagesToDisplay.push(winnerImageUrl);
        }

        await channel
          .send({
            content: `\n\n **=====Ë°®ÂΩ∞Âºè=====**„ÄÄ\n\n  üéâü•á**${winnerDisplayName}„Åï„Çì (${winnerUsername}) „Åå1ÁùÄ„Åß„Åô**ÔºÅÔºÅü•áüéâ„ÄÄ \n\n **ü•áÂÑ™Âãù„Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åôü•á**\n`,
            files: imagesToDisplay,
          })
          .catch(console.error);
        this.games.delete(guildId);
      }
    }, 20000);
  }

  chooseSwimStyle(guildId, userId, style) {
    const game = this.getGame(guildId);
    if (game && game.raceStarted) {
      game.swimStyleChoices.set(userId, style);
    }
  }
}

const swimGame = new SwimGame();

export const data = new SlashCommandBuilder()
  .setName("swim")
  .setDescription("üèä‚Äç‚ôÇÔ∏èÊ∞¥Ê≥≥Â§ß‰ºö„ÇíÈñãÂÇ¨„Åô„Çã„Åû„Éºüèä‚Äç‚ôÇÔ∏è");

export async function execute(interaction) {
  try {
    await interaction.deferReply();

    const game = swimGame.createGame(interaction.guildId);

    const imageURL =
      "https://cdn.glitch.global/60a83d0b-edab-43dd-83f1-1ac7dc6138d4/%E7%84%A1%E9%A1%8C650_20240708010257.jpg?v=1720392300092";
    const attachment = new AttachmentBuilder(imageURL, { name: "start.jpg" });

    // ÂàùÊúü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°Ôºà„Éú„Çø„É≥„Å™„ÅóÔºâ
    await interaction.editReply({
      content:
        "**üåü SNAP SWIMMING RACE üåü\n\n„ÄÄ  „ÄÄ„ÄÄ  üèä‚Äç‚ôÇÔ∏èÈñãÂÇ¨Ê∫ñÂÇô‰∏≠üèä‚Äç‚ôÇÔ∏è**„ÄÄ\n\n **„Äå„Åø„Çì„Å™„Éº„ÄÅÊ∫ñÂÇô„ÅØ„ÅÑ„ÅÑ„Åã„ÉºÔºü„Äç**„ÄÄ\n\n„ÄÄ",
      files: [attachment],
    });

    // 10ÁßíÂæÖÊ©ü
    await new Promise((resolve) => setTimeout(resolve, 10000));

    // „Éú„Çø„É≥„ÇíÂê´„ÇÄ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÁ∑®ÈõÜ
    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId("join")
        .setLabel("„Çπ„Çø„Éº„ÉàÂè∞„Å´Á´ã„Å§")
        .setStyle(ButtonStyle.Primary)
        .setEmoji("üèä‚Äç‚ôÇÔ∏è")
    );

    await interaction.editReply({
      content:
        "**üåü SNAP SWIMMING RACE üåü\n\n„ÄÄ  „ÄÄ„ÄÄ  üèä‚Äç‚ôÇÔ∏èÈñãÂÇ¨üèä‚Äç‚ôÇÔ∏è**„ÄÄ\n\n **„Äå„Åø„Çì„Å™„Éº„ÄÅ„Çπ„Çø„Éº„ÉàÂè∞„Å´‰∏ä„Åå„Çå„ÉºÔºÅ„Äç**„ÄÄ\n\n„ÄÄÔºà180ÁßíÂæå„Å´„Çπ„Çø„Éº„Éà„Å†„ÉÉÔºâ",
      components: [row],
    });

    setTimeout(async () => {
      if (game.participants.size === 0) {
        await interaction.channel
          .send("ÂèÇÂä†ËÄÖ„Åå„ÅÑ„Å™„ÅÑ„Åü„ÇÅÂ§ß‰ºö‰∏≠Ê≠¢ÔºÅ")
          .catch(console.error);
        swimGame.games.delete(interaction.guildId);
      } else {
        await interaction.channel
          .send(
            "**„Äå„Çà„Éº„ÅÑ„Å£„Éª„Éª„Éâ„Éº„Éº„É≥ÔºÅÔºÅÔºÅ„Äç**\n\n **üèä‚Äç‚ôÇÔ∏èLET'S SNAP SWIM!!üèä‚Äç‚ôÇÔ∏è**"
          )
          .catch(console.error);
        swimGame.startRace(interaction.guildId, interaction.channel);
      }
    }, 180000);
  } catch (error) {
    console.error("Error in execute function:", error);
    if (!interaction.replied && !interaction.deferred) {
      await interaction
        .reply({
          content: "„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ",
          ephemeral: true,
        })
        .catch(console.error);
    } else {
      await interaction
        .followUp({
          content: "„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ",
          ephemeral: true,
        })
        .catch(console.error);
    }
  }
}

export async function handleButton(interaction) {
  try {
    const game = swimGame.getGame(interaction.guildId);
    if (interaction.customId === "join") {
      const userId = interaction.user.id;

      // „É¶„Éº„Ç∂„Éº„ÅåÊó¢„Å´Âá¶ÁêÜ‰∏≠„Åß„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
      if (processingUsers.has(userId)) {
        await interaction.deferUpdate();
        return;
      }

      processingUsers.add(userId);

      try {
        if (game && !game.raceStarted) {
          // „É¶„Éº„Ç∂„Éº„ÅåÊó¢„Å´ÂèÇÂä†„Åó„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
          if (!game.participants.has(userId)) {
            await interaction.deferUpdate();
            swimGame.addParticipant(interaction.guildId, userId);
            await interaction.followUp({
              content: `**${interaction.user.username}**„Åï„Çì„Åå„Çπ„Çø„Éº„ÉàÂè∞„Å´Á´ã„Å°„Åæ„Åó„ÅüÔºÅüèä‚Äç‚ôÇÔ∏è`,
              ephemeral: false
            });
          } else {
            // Êó¢„Å´ÂèÇÂä†„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÈùô„Åã„Å´ÁÑ°Ë¶ñ
            await interaction.deferUpdate();
          }
        } else {
          // „É¨„Éº„Çπ„ÅåÈñãÂßã„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÇÇÈùô„Åã„Å´ÁÑ°Ë¶ñ
          await interaction.deferUpdate();
        }
      } finally {
        // Âá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åü„Çâ„Éï„É©„Ç∞„ÇíËß£Èô§
        processingUsers.delete(userId);
      }
    } else if (interaction.customId.startsWith("swimStyle_")) {
      const style = interaction.customId.split("_")[1];
      if (
        game &&
        game.raceStarted &&
        game.participants.has(interaction.user.id)
      ) {
        await interaction.deferUpdate();
        swimGame.chooseSwimStyle(
          interaction.guildId,
          interaction.user.id,
          style
        );

        await interaction.followUp({
          content: `${style}„Å´Âàá„ÇäÊõø„Åà„Çã„Åû„Å£ÔºÅ`,
          ephemeral: true,
        });
      } else {
        await interaction.deferUpdate();
      }
    }
  } catch (error) {
    console.error("Error handling button interaction:", error);
    // „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÇÇÈùô„Åã„Å´Âá¶ÁêÜ
    if (!interaction.deferred) {
      await interaction.deferUpdate().catch(console.error);
    }
  }
}

export function initializeBot() {
  console.log("Ê∞¥Ê≥≥„Éú„ÉÉ„Éà„ÇíÂàùÊúüÂåñ„Åó„Åæ„Åó„Åü");
}